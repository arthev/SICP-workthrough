(define (call-the-cops)
  (newline)
  (display "The cops are on their way.")
  #t)
(define (make-account balance pwd)
  (let ((incorrect-password-attempts 0))
	(define (withdraw amount)
	  (if (>= balance amount)
		(begin (set! balance (- balance amount))
			   balance)
		"Insufficient funds"))
	(define (deposit amount)
	  (set! balance (+ balance amount))
	  balance)
	(define (dispatch p m)
	  (cond ((not (equal? p pwd)) (lambda (x) 
									(if (< incorrect-password-attempts 7)
									  (begin (set! incorrect-password-attempts (1+ incorrect-password-attempts))
											 "Incorrect password")
									  (begin (set! incorrect-password-attempts 0)
											 (call-the-cops)))))
			((eq? m 'withdraw) withdraw)
			((eq? m 'deposit) deposit)
			(else (error "Unknown request: MAKE-ACCOUNT" m))))
	dispatch))


(define acc (make-account 100 'secret-password))
((acc 'secret-password 'withdraw) 40)
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
((acc 'some-other-password 'withdraw) 50)
