(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (in? symbol sequence)
  (cond ((null? sequence) false)
		((eq? symbol (car sequence)) true)
		(else (in? symbol (cdr sequence)))))
(define (until-symbol-or-done symbol sequence)
  (define (internal sequence)
	(cond ((null? sequence) '())
		  ((eq? (car sequence) symbol) '())
		  (else (cons (car sequence)
					  (internal (cdr sequence))))))
  (strip-lists-of-one (internal sequence)))
(define (after-symbol-or-none symbol sequence)
  (cond ((null? sequence) '())
		((eq? (car sequence) symbol) (strip-lists-of-one (cdr sequence)))
		(else (after-symbol-or-none symbol (cdr sequence)))))
(define (strip-lists-of-one l)
  (if (= (length l) 1)
	(car l)
	l))
(define (sum? x) (and (pair? x) (in? '+ x)))
(define (addend s)
  (until-symbol-or-done '+ s))
(define (augend s) 
  (after-symbol-or-none '+ s))
(define (product? x) (and (pair? x) (in? '* x)))
(define (multiplier p)
  (until-symbol-or-done '* p))
(define (multiplicand p) 
  (after-symbol-or-none '* p))
(define (=number? exp num) (and (number? exp) (= exp num)))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
		((=number? a2 0) a1)
		((and (number? a1) (number? a2))
		 (+ a1 a2))
		(else (list a1 '+ a2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
		((=number? m1 1) m2)
		((=number? m2 1) m1)
		((and (number? m1) (number? m2)) (* m1 m2))
		(else (list m1 '* m2))))




(define (deriv exp var)
;  (newline)
;  (display exp)
  (cond ((number? exp) 0)
		((variable? exp) (if (same-variable? exp var) 1 0))
		((= (length exp) 1) (deriv (car exp) var))
		((sum? exp) (make-sum (deriv (addend exp) var)
							  (deriv (augend exp) var)))
		((product? exp) (make-sum
						  (make-product (multiplier exp)
										(deriv (multiplicand exp) var))
						  (make-product (deriv (multiplier exp) var)
										(multiplicand exp))))
		(else (error "unknown expression type: DERIV" exp))))





;tests
(deriv '(x + (3 * (x + (y + 2)))) 'x)
(deriv '(x * x) 'x)
(deriv '(x + 3 * (x + y + 2)) 'x)
(deriv '(x * x + x) 'x)
(deriv '(x) 'x)
