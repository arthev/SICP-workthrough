(define (dcons prev item next) 
  (list prev item next))
(define (prev link) (car link))
(define (item link) (cadr link))
(define (next link) (caddr link))
(define (set-prev! link v) (set-car! link v))
(define (set-item! link v) (let ((target (cdr link))) (set-car! target v)))
(define (set-next! link v) (let ((target (cddr link))) (set-car! target v)))
(define (make-deque) (cons '() '()))
(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (empty-deque? deque) (null? (front-ptr deque)))
(define (set-front-ptr! deque item) (set-car! deque item))
(define (set-rear-ptr! deque item) (set-cdr! deque item))
(define (front-deque deque)
  (if (empty-deque? deque)
	(error "FRONT called with empty deque" deque)
	(item (front-ptr deque))))
(define (rear-deque deque)
  (if (empty-deque? deque)
	(error "REAR called with empty deque" deque)
	(item (rear-ptr deque))))
(define (reset-deque! deque)
  (set-front-ptr! deque '())
  (set-rear-ptr! deque '())
  deque)
(define (front-delete-deque! deque)
  (cond ((empty-deque? deque)
		 (error "FRONT-DELETE called with an empty deque" deque))
		((null? (next (front-ptr deque)))
		 (reset-deque! deque)
		 deque)
		(else 
		  (set-front-ptr! deque (next (front-ptr deque)))
		  (set-prev! (front-ptr deque) '())
		  deque)))
(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque)
		 (error "REAR-DELETE called with an empty deque" deque))
		((null? (prev (rear-ptr deque)))
		 (reset-deque! deque)
		 deque)
		(else 
		  (set-rear-ptr! deque (prev (rear-ptr deque)))
		  (set-next! (rear-ptr deque) '())
		  deque)))
(define (rear-insert-deque! deque item)
  (let ((new-link (dcons '() item '())))
	(cond ((empty-deque? deque)
		   (set-front-ptr! deque new-link)
		   (set-rear-ptr! deque new-link)
		   deque)
		  (else
			(let ((old-tail (rear-ptr deque)))
			  (set-next! old-tail new-link)
			  (set-prev! new-link old-tail)
			  (set-rear-ptr! deque new-link)
			  deque)))))
(define (front-insert-deque! deque item)
  (let ((new-link (dcons '() item '())))
	(cond ((empty-deque? deque)
		   (set-front-ptr! deque new-link)
		   (set-rear-ptr! deque new-link)
		   deque)
		  (else
			(let ((old-head (front-ptr deque)))
			  (set-prev! old-head new-link)
			  (set-next! new-link old-head)
			  (set-front-ptr! deque new-link)
			  deque)))))
(define (print-deque deque)
  (define (deque->list link)
	(if (null? link) 
	  '()
	  (cons (item link) (deque->list (next link)))))
  (newline)
  (display (deque->list (front-ptr deque)))
  (newline))

(define dq (make-deque))
(print-deque dq)
(print-deque (front-insert-deque! dq 'a))
(print-deque (front-insert-deque! dq 'b))
(print-deque (front-insert-deque! dq 'c))
(print-deque (rear-insert-deque! dq 'b))
(print-deque (rear-insert-deque! dq 'c))

(print-deque (rear-delete-deque! dq))
(print-deque (rear-delete-deque! dq))
(print-deque (rear-delete-deque! dq))
(print-deque (front-delete-deque! dq))
(print-deque (front-delete-deque! dq))
(print-deque (front-delete-deque! dq))
