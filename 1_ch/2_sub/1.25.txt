(define (expmod base exp m)
  (cond ((= exp 0) 1)
		((even? exp)
		 (remainder
		   (square (expmod base (/ exp 2) m))
		   m))
		(else
		  (remainder
			(* base (expmod base (- exp 1) m))
			m))))

contra

(define (fast-expt b n)
  (cond ((= n 0) 1)
  		((even? n) (square (fast-expt b (/ n 2))))
		(else (* b (fast-expt b (- n 1))))))

(define (expmod base exp m)
  (remainder (fast-expt base exp) m))

 
Analysis:
As mentioned in footnote 46, by using the successive remainders
we are spared work because our computations don't have to deal
with numbers much larger than m. This is a significant gain
because for sificantly large numbers, we have to start operating
on multiple words, which slows down the computation. Therefore,
Alyssa P. Hacker is wrong, her approach is not as efficient.
